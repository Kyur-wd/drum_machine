{"version":3,"sources":["components/Header.jsx","actionTypeConsts.js","components/DrumPad.jsx","actionCreators.js","components/DrumPadContainer.jsx","components/VolumeSlider.jsx","components/Display.jsx","components/App.jsx","reducers/index.js","index.js"],"names":["Header","react_default","a","createElement","id","ADJUST_VOLUME","UPDATE_DISPLAY_TEXT","SET_PRESSED_KEY","RESET_PRESSED_KEY","DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","styleClasses","clickButton","bind","assertThisInitialized","pressedKey","hotKey","resetPressedKey","_this2","audioFile","document","getElementById","volume","currentTime","play","updateDisplayText","soundName","setState","setTimeout","className","onClick","src","playedSoundFileUrl","preload","Component","connect","dispatch","text","type","payload","DrumPadContainer","Fragment","components_DrumPad","adjustVolume","e","target","value","min","max","onChange","displayText","lastPlayedSoundName","App","addEventListener","event","setPressedKey","key","toUpperCase","removeEventListener","components_Header","components_Display","components_VolumeSlider","components_DrumPadContainer","initialState","store","createStore","arguments","length","undefined","action","assign","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","components_App"],"mappings":"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","file":"static/js/main.83898e8e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h1 id=\"heading\">Simple Drum Machine</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export const ADJUST_VOLUME = \"ADJUST_VOLUME\";\r\nexport const UPDATE_DISPLAY_TEXT = \"UPDATE_DISPLAY_TEXT\";\r\nexport const SET_PRESSED_KEY = \"SET_PRESSED_KEY\";\r\nexport const RESET_PRESSED_KEY = \"RESET_PRESSED_KEY\";\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateDisplayText, resetPressedKey } from \"../actionCreators\";\r\n\r\nclass DrumPad extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      styleClasses: \"drum-pad\"\r\n    };\r\n    this.clickButton = this.clickButton.bind(this);\r\n  }\r\n\r\n  // Neue Props erhalten, also prüfen, ob der eigene Hotkey (Tastatur) gedrückt wurde, falls ja: Audio starten und \"Pressed\" Style anwenden\r\n  componentDidUpdate() {\r\n    if (this.props.pressedKey === this.props.hotKey) {\r\n      this.clickButton();\r\n      this.props.resetPressedKey();\r\n    }\r\n  }\r\n\r\n  // Wird ausgelöst bei Maus-Click und Tastatur-Click\r\n  clickButton() {\r\n    const audioFile = document.getElementById(this.props.hotKey);\r\n    audioFile.volume = this.props.volume;\r\n    audioFile.currentTime = 0;\r\n    audioFile.play();\r\n\r\n    // Display updaten\r\n    this.props.updateDisplayText(this.props.soundName);\r\n\r\n    // Styles setzen\r\n    this.setState({ styleClasses: \"drum-pad drum-pad-clicked\" });\r\n    setTimeout(() => {\r\n      this.setState({ styleClasses: \"drum-pad\" });\r\n    }, 200);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className={this.state.styleClasses}\r\n        id={this.props.soundName}\r\n        onClick={this.clickButton}\r\n      >\r\n        {this.props.hotKey}\r\n        <audio\r\n          className=\"clip\"\r\n          id={this.props.hotKey}\r\n          src={this.props.playedSoundFileUrl}\r\n          preload=\"auto\"\r\n        />\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    volume: state.volume,\r\n    pressedKey: state.pressedKey\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    updateDisplayText: function(text) {\r\n      dispatch(updateDisplayText(text));\r\n    },\r\n    resetPressedKey: function() {\r\n      dispatch(resetPressedKey());\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(DrumPad);\r\n","import {\r\n  ADJUST_VOLUME,\r\n  UPDATE_DISPLAY_TEXT,\r\n  SET_PRESSED_KEY,\r\n  RESET_PRESSED_KEY\r\n} from \"./actionTypeConsts\";\r\n\r\nexport function setVolume(volume) {\r\n  return {\r\n    type: ADJUST_VOLUME,\r\n    payload: volume\r\n  };\r\n}\r\n\r\nexport function updateDisplayText(text) {\r\n  return {\r\n    type: UPDATE_DISPLAY_TEXT,\r\n    payload: text\r\n  };\r\n}\r\n\r\nexport function setPressedKey(key) {\r\n  return {\r\n    type: SET_PRESSED_KEY,\r\n    payload: key\r\n  };\r\n}\r\n\r\nexport function resetPressedKey() {\r\n  return {\r\n    type: RESET_PRESSED_KEY\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport DrumPad from \"./DrumPad\";\r\n\r\nconst DrumPadContainer = props => {\r\n  return (\r\n    <React.Fragment>\r\n      <DrumPad\r\n        hotKey=\"Q\"\r\n        soundName=\"Heater-1\"\r\n        playedSoundFileUrl=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\r\n      />\r\n      <DrumPad\r\n        hotKey=\"W\"\r\n        soundName=\"Heater-2\"\r\n        playedSoundFileUrl=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\r\n      />\r\n      <DrumPad\r\n        hotKey=\"E\"\r\n        soundName=\"Heater-3\"\r\n        playedSoundFileUrl=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\r\n      />\r\n      <DrumPad\r\n        hotKey=\"A\"\r\n        soundName=\"Heater-4\"\r\n        playedSoundFileUrl=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\r\n      />\r\n      <DrumPad\r\n        hotKey=\"S\"\r\n        soundName=\"Clap\"\r\n        playedSoundFileUrl=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\r\n      />\r\n      <DrumPad\r\n        hotKey=\"D\"\r\n        soundName=\"Open-HH\"\r\n        playedSoundFileUrl=\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\r\n      />\r\n      <DrumPad\r\n        hotKey=\"Z\"\r\n        soundName=\"Kick-n'-Hat\"\r\n        playedSoundFileUrl=\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\r\n      />\r\n      <DrumPad\r\n        hotKey=\"X\"\r\n        soundName=\"Kick\"\r\n        playedSoundFileUrl=\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\r\n      />\r\n      <DrumPad\r\n        hotKey=\"C\"\r\n        soundName=\"Closed-HH\"\r\n        playedSoundFileUrl=\"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DrumPadContainer;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setVolume } from \"../actionCreators\";\r\n\r\nconst VolumeSlider = props => {\r\n  return (\r\n    <input\r\n      type=\"range\"\r\n      min=\"0\"\r\n      max=\"100\"\r\n      value={props.volume * 100}\r\n      onChange={props.adjustVolume}\r\n      id=\"slider\"\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    volume: state.volume\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    adjustVolume: function(e) {\r\n      dispatch(setVolume(e.target.value / 100));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(VolumeSlider);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Display = props => {\r\n  return <output id=\"display\">{props.displayText}</output>;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    displayText: state.lastPlayedSoundName\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(Display);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Header from \"./Header\";\r\nimport DrumPadContainer from \"./DrumPadContainer\";\r\nimport VolumeSlider from \"./VolumeSlider\";\r\nimport Display from \"./Display\";\r\nimport { setPressedKey } from \"../actionCreators\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    document.addEventListener(\"keypress\", event => {\r\n      this.props.setPressedKey(event.key.toUpperCase());\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keypress\", event => {\r\n      this.props.setPressedKey(event.key.toUpperCase());\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Header />\r\n        <main id=\"drum-machine-container\">\r\n          <div id=\"drum-machine\">\r\n            <Display />\r\n            <VolumeSlider />\r\n            <DrumPadContainer />\r\n          </div>\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    setPressedKey: function(key) {\r\n      dispatch(setPressedKey(key));\r\n    }\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(App);\r\n","import {\r\n  ADJUST_VOLUME,\r\n  UPDATE_DISPLAY_TEXT,\r\n  SET_PRESSED_KEY,\r\n  RESET_PRESSED_KEY\r\n} from \"../actionTypeConsts\";\r\n\r\nconst initialState = {\r\n  volume: 0.5,\r\n  lastPlayedSoundName: \"\",\r\n  pressedKey: \"\"\r\n};\r\n\r\nexport default function rootReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADJUST_VOLUME:\r\n      return Object.assign({}, state, { volume: action.payload });\r\n\r\n    case UPDATE_DISPLAY_TEXT:\r\n      return Object.assign({}, state, { lastPlayedSoundName: action.payload });\r\n\r\n    case SET_PRESSED_KEY:\r\n      return Object.assign({}, state, { pressedKey: action.payload });\r\n\r\n    case RESET_PRESSED_KEY:\r\n      return Object.assign({}, state, { pressedKey: \"\" });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.css\";\r\nimport App from \"./components/App\";\r\nimport rootReducer from \"./reducers\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}